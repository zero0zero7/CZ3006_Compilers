package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short RPAREN = 9;
		static public final short RCURLY = 10;
		static public final short SEMICOLON = 11;
		static public final short VOID = 12;
		static public final short BOOLEAN = 13;
		static public final short INT = 14;
		static public final short LCURLY = 15;
		static public final short RBRACKET = 16;
		static public final short IF = 17;
		static public final short WHILE = 18;
		static public final short BREAK = 19;
		static public final short RETURN = 20;
		static public final short COMMA = 21;
		static public final short EQL = 22;
		static public final short IMPORT = 23;
		static public final short PUBLIC = 24;
		static public final short PLUS = 25;
		static public final short TIMES = 26;
		static public final short DIV = 27;
		static public final short MOD = 28;
		static public final short TYPE = 29;
		static public final short MODULE = 30;
		static public final short ELSE = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LT = 34;
		static public final short LEQ = 35;
		static public final short GT = 36;
		static public final short GEQ = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pDLcbOL5KOVkyCACDaW0XgIf0IeY8WYWYoYO0A99WcxWjkk9LbMTg25bfPPlay$V57Fzl" +
		"tnVRDzcnVBBLTfT8ooLQjljvxxvdnpfqx0$CZdkuyx$csztptpBddVjy5N9im6#TWAYfGYI" +
		"eqe10Ne02ZaOeBSJ6IqGTzSGRweJzIS2PwHSJk7H5xO5ZsO1ix77Te1DnS6$TIp44Dob6Dy" +
		"PY0YOYMRx0Lwt4vhi00k70siZ0S8u9uDrbvScT8dfkyA7##RI5vLnkhy#Kx4PAt0JUYkvyd" +
		"8Ncd1#GxwUVPzsQ#iJTsxoZ36uSb8VYJSIwce2SMCJxE7o$1N2HYP2VlCSZm9g4fA9BjoAz" +
		"rzDOxUgSvUcU6yKwtxTyCB9GFx5wvDuXdxaIp$8JBi13hWk9sUodAB3ks3Ckn0Ykn2kS7CQ" +
		"qxsu0n7MRkQhi7qkI4740tn2C6Pz6EXHUdmOFDj5jvJarxhEL$cEUnLPtsLgIZ61doBPgHg" +
		"MBNAbaaxRW8LyenN2A7v10IkCERC8JxDmmvoEEyVBIWHJv4AUemYUDvM8n6p9BxC0zNORLy" +
		"XpLOYmNOA6su1jVnsMp13RWUD#CMwDSsPF0CPhBI3645oMBUR6REvLkIn$Ta9FERRq4XYhZ" +
		"xnVyRzd$5rLZjtAnLqNoYtVa4n$BvZUFpwy5Q4iTAcS3tFP4T8JnlKaYUHbwSdzSx9CzSdO" +
		"yN6v9NnKeUw#SXudpEU#FirLZRd2Dc9$6mfWJ6ItYlkeZk4Hlo7bthjU#VRdc3l9uWZxaJK" +
		"SeVx$3y0#s#0VTFOmKPm6#2T7OgEzE#peuoTxLTQfpjMDOuDwkSbxPP8IkeLpBMHzdM$s6U" +
		"HqsTJdr#6MTxcDMZOYbArXhtgp963tyrXfRA$TFvNixpieicSIoddSnHvyNpfu$Lz9jM4dN" +
		"zgMdKe#bDfkOLNdmNWUqRZAB8BWRi9EucxY1U9puXsW1NVyfZEiy7#l80hHTb1b5EdHmjZO" +
		"7Db2Kgvmx6Kgppx60ydKXJ$Fkf5oj$5VFeTWMDNPHbb7jKR0vZNAjhEet3ojTeIcqBzHdAD" +
		"$lKVRJRYTtqLLFk9sA80ofs9DmQBJcES$vybNigxPFAlzNsdvOJRcAkYhFlkBp4F0idaLYW" +
		"z2QYd#BUIdsHyY$jU4skPYMd48kLFerOelBnUMgtESnh85OGbSHaOZMnJiLc4IkLlfvOHl1" +
		"ykDPOvgzIieLOUyeFovwp9q1hi#pVqU1rO9SbPu9Fv#7SPz7REze7MywOG5jBLlvK9VCjiO" +
		"7ALslBST0vjoj6dKkUMqsZpAJSeM8zExS#BTjc5whvGnsubJQxthRETblSg$nxExEMIC3SC" +
		"uDzhYnrF$rTpuiy9veSVDkXBlbRVZOaH$bJ$f3VORlaDsFyMhwIB#KB#Lm#a$s6PvynxlNp" +
		"MClaKx#rX$ZOq3uYtfDtvGrArZnvaNYMU48Ubvtoc3mgZyZ3yf0yQB0V4DOTUKTUaAVbANb" +
		"ItZQyRyfRXjmjpnZoBk5R9$SOEi#AF2$FoMloghmYByjBmcecxnkn8yRulJvR3ijH#L5#2F" +
		"Xl1utnLx$zYnpdZlnZw7znQEGRretVOIu2$1Ppi$Eue5TClVluC9xLVmBxoqHozOvLolXme" +
		"mEPoBDW17FuKCDSDUHMKsVLP2ToyOjL1$WDgOL4FlcZY0Bso09sdD548USLqLV7U1tdZw6T" +
		"JLr7Bls3A7LaSfqwSgZdqA$tG2SCOqp$7YXJoAATHLbkGGRlaK4vE2pSxCfH$8hJ2F1Bp4r" +
		"exDDkrFyB7eDKBW==");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [1] Imports = Import Imports; returns 'Imports' although none is marked
			Action.NONE,  	// [2] Imports = 
			RETURN3,	// [3] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [4] Declarations = Declaration Declarations; returns 'Declarations' although none is marked
			Action.NONE,  	// [5] Declarations = 
			Action.RETURN,	// [6] Declaration = FunctionDeclaration
			Action.RETURN,	// [7] Declaration = FieldDeclaration
			Action.RETURN,	// [8] Declaration = TypeDeclaration
			RETURN9,	// [9] FunctionDeclaration = Accessibility TypeName ID LPAREN ParameterList RPAREN LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [10] FieldDeclaration = Accessibility TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [11] TypeDeclaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [12] Accessibility = PUBLIC
			Action.NONE,  	// [13] Accessibility = 
			Action.RETURN,	// [14] TypeName = PrimitiveType
			Action.RETURN,	// [15] TypeName = ArrayType
			Action.RETURN,	// [16] TypeName = ID
			Action.RETURN,	// [17] PrimitiveType = VOID
			Action.RETURN,	// [18] PrimitiveType = BOOLEAN
			Action.RETURN,	// [19] PrimitiveType = INT
			RETURN3,	// [20] ArrayType = PrimitiveType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [21] ArrayType = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [22] ArrayType = ArrayType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN2,	// [23] ParameterList = Parameter ParameterListTail; returns 'ParameterListTail' although none is marked
			Action.NONE,  	// [24] ParameterList = 
			RETURN3,	// [25] ParameterListTail = COMMA Parameter ParameterListTail; returns 'ParameterListTail' although none is marked
			Action.NONE,  	// [26] ParameterListTail = 
			RETURN2,	// [27] Parameter = TypeName ID; returns 'ID' although none is marked
			RETURN2,	// [28] StatementList = Statement StatementList; returns 'StatementList' although none is marked
			Action.NONE,  	// [29] StatementList = 
			Action.RETURN,	// [30] Statement = LocalVariableDeclaration
			Action.RETURN,	// [31] Statement = BlockStatement
			Action.RETURN,	// [32] Statement = IfStatement
			Action.RETURN,	// [33] Statement = WhileStatement
			Action.RETURN,	// [34] Statement = BreakStatement
			Action.RETURN,	// [35] Statement = ReturnStatement
			Action.RETURN,	// [36] Statement = ExpressionStatement
			RETURN3,	// [37] LocalVariableDeclaration = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [38] BlockStatement = LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			RETURN7,	// [39] IfStatement = IF LPAREN Expression RPAREN Statement ELSE Statement; returns 'Statement' although none is marked
			RETURN5,	// [40] IfStatement = IF LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN5,	// [41] WhileStatement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [42] BreakStatement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [43] ReturnStatement = RETURN OptionalExpression SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [44] OptionalExpression = Expression
			Action.NONE,  	// [45] OptionalExpression = 
			RETURN2,	// [46] ExpressionStatement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [47] Expression = RhsExpr
			Action.RETURN,	// [48] Expression = Assignment
			RETURN3,	// [49] Assignment = LhsExpr EQL Expression; returns 'Expression' although none is marked
			Action.RETURN,	// [50] LhsExpr = ArrayAccess
			Action.RETURN,	// [51] LhsExpr = ID
			RETURN4,	// [52] ArrayAccess = ID LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			RETURN4,	// [53] ArrayAccess = ArrayAccess LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [54] RhsExpr = ArithmeticExpr
			RETURN3,	// [55] RhsExpr = ArithmeticExpr Comparison ArithmeticExpr; returns 'ArithmeticExpr' although none is marked
			Action.RETURN,	// [56] Comparison = EQEQ
			Action.RETURN,	// [57] Comparison = NEQ
			Action.RETURN,	// [58] Comparison = LT
			Action.RETURN,	// [59] Comparison = LEQ
			Action.RETURN,	// [60] Comparison = GT
			Action.RETURN,	// [61] Comparison = GEQ
			new Action() {	// [62] ArithmeticExpr = ArithmeticExpr Additive Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [63] ArithmeticExpr = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [64] Additive = PLUS
			Action.RETURN,	// [65] Additive = MINUS
			new Action() {	// [66] Term = Term Multiplicative Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [67] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [68] Multiplicative = TIMES
			Action.RETURN,	// [69] Multiplicative = DIV
			Action.RETURN,	// [70] Multiplicative = MOD
			RETURN2,	// [71] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [72] Factor = PrimaryExpr
			Action.RETURN,	// [73] PrimaryExpr = LhsExpr
			Action.RETURN,	// [74] PrimaryExpr = FunctionCall
			Action.RETURN,	// [75] PrimaryExpr = ArrayExpr
			Action.RETURN,	// [76] PrimaryExpr = STRING_LITERAL
			Action.RETURN,	// [77] PrimaryExpr = INT_LITERAL
			Action.RETURN,	// [78] PrimaryExpr = TRUE
			Action.RETURN,	// [79] PrimaryExpr = FALSE
			RETURN3,	// [80] PrimaryExpr = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
			RETURN4,	// [81] FunctionCall = ID LPAREN ExprList RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [82] ExprList = ExprListNonEmpty
			Action.NONE,  	// [83] ExprList = 
			RETURN3,	// [84] ExprListNonEmpty = Expression COMMA ExprListNonEmpty; returns 'ExprListNonEmpty' although none is marked
			Action.RETURN,	// [85] ExprListNonEmpty = Expression
			RETURN3	// [86] ArrayExpr = LBRACKET ExprListNonEmpty RBRACKET; returns 'RBRACKET' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
